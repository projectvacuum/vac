#!/usr/bin/python
#
#  vacd - Vac daemon which runs on factory nodes
#
#  Andrew McNab, University of Manchester.
#  Copyright (c) 2013-6. All rights reserved.
#
#  Redistribution and use in source and binary forms, with or
#  without modification, are permitted provided that the following
#  conditions are met:
#
#    o Redistributions of source code must retain the above
#      copyright notice, this list of conditions and the following
#      disclaimer. 
#    o Redistributions in binary form must reproduce the above
#      copyright notice, this list of conditions and the following
#      disclaimer in the documentation and/or other materials
#      provided with the distribution. 
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
#  CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
#  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
#  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
#  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
#  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
#  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
#  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
#  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.
#
#  Contacts: Andrew.McNab@cern.ch  http://www.gridpp.ac.uk/vac/
#

import re
import uuid
import os
import errno
import sys
import json
import time
import subprocess
import socket
import shutil
import tempfile
import hashlib
import base64
import multiprocessing
import operator
import stat
import random
import BaseHTTPServer
import SocketServer

import libvirt

import vac

mjfHttpdStartTime = 0

def vacLibvirtErrorHandler(ctxt, err):
    global errno    
    errno = err            
      
def pollFactories():

   responses = vac.shared.sendMachinetypesRequests(clientName = 'vacd-factory')
   
   machinetypesList   = []
   machinetypeResults = {}
   machinegroupScores = {}
   
   # Go through the machinetypes and their responses from the factories
   for machinetypeName in vac.shared.machinetypes:
     machinegroupScores[vac.shared.machinetypes[machinetypeName]['machinegroup']] = 0.0
   
     if vac.shared.machinetypes[machinetypeName]['share'] <= 0.0:
       continue
       
     machinetypeResults[machinetypeName] = { 'score'           : 0.0,
                                             'lastAbort'       : 0,
                                             'numBeforeFizzle' : 0  }
     
     for factoryName in responses:
       try:
         response = responses[factoryName]['machinetypes'][machinetypeName]
       except:
         continue

       # we only have to add hs06/share for this machinetype to get normalisation at the end automatically
       machinetypeResults[machinetypeName]['score'] += response['running_hs06'] / vac.shared.machinetypes[machinetypeName]['share']
       machinegroupScores[vac.shared.machinetypes[machinetypeName]['machinegroup']] += response['running_hs06'] / vac.shared.machinetypes[machinetypeName]['share']

       vac.vacutils.logLine(factoryName + ' responds, running total for ' + machinetypeName +
                            ' now ' + str(machinetypeResults[machinetypeName]))
                               
       machinetypeResults[machinetypeName]['numBeforeFizzle'] += response['num_before_fizzle']

       try:
         # if message with code provided, then we always use it for decisions
         messagecode = int(response['shutdown_message'][0:3])
       except:
         pass
       else:
         if (messagecode >= 300) and (messagecode <= 699):
           # This is an abort!
           #
           # 300 is no work, 400 is banned, 500 is problem with VM/Site
           # 600 is grid-wide problem with job agent or application in VM
           # (VMs can return 700 for transient problems within the VM)
           
           # If this is the most recent abort of this machinetype anywhere in this space
           if response['shutdown_time'] > machinetypeResults[machinetypeName]['lastAbort']:
             machinetypeResults[machinetypeName]['lastAbort'] = response['shutdown_time']
                           
   vac.vacutils.logLine('Final totals ' + str(machinetypeResults))

   # Go through the machinetypes, trying to pick ones eligible to start:
   # - Target share must be > 0.0
   # - If there has been an abort, it must be at least backoff_second ago
   # - We extend this backoff by fizzle_seconds if any other VMs of this
   #     machinetype are starting or not yet running for fizzle_seconds
   #
   # This procedure aims to give one VM the chance to try a machinetype when the
   # initial backoff_seconds following an abort expires. Rather than have
   # many VMs all trying to run as machinetype immediately. In practice, more 
   # than one may win the race to be the "first" to try, but this should
   # still be a manageable number for the experiment's Matcher/Task Queue. 
      
   for machinetypeName in vac.shared.machinetypes:
      # Say what is happening with all enabled machinetypes
      if vac.shared.machinetypes[machinetypeName]['share'] > 0.0:
           vac.vacutils.logLine('For ' + machinetypeName + ', ' +
                                str(machinetypeResults[machinetypeName]['numBeforeFizzle']) + ' are before fizzle_time. ' +
                                'LastAbort was ' + time.strftime('%b %d %H:%M:%S', time.localtime(machinetypeResults[machinetypeName]['lastAbort'])) +
                                '. Machine creation restart at ' +
                                time.strftime('%b %d %H:%M:%S',
                                              time.localtime(machinetypeResults[machinetypeName]['lastAbort'] +
                                                             vac.shared.machinetypes[machinetypeName]['backoff_seconds'] +
                                                             vac.shared.machinetypes[machinetypeName]['fizzle_seconds'] * (machinetypeResults[machinetypeName]['numBeforeFizzle'] > 0))) + 
                                '.')

      # But only eligible ones are added to the list we sort and return
      if ((vac.shared.machinetypes[machinetypeName]['share'] > 0.0) and 
          ((vac.shared.shutdownTime is None) or (time.time() + vac.shared.machinetypes[machinetypeName]['min_wallclock_seconds'] < vac.shared.shutdownTime)) and
          (machinetypeResults[machinetypeName]['lastAbort']
              < (int(time.time()) 
                 - vac.shared.machinetypes[machinetypeName]['backoff_seconds'] 
                 - vac.shared.machinetypes[machinetypeName]['fizzle_seconds'] * (machinetypeResults[machinetypeName]['numBeforeFizzle'] > 0)))):
        machinetypesList.append( { 'machinetypeName'   : machinetypeName, 
                                   'machinetypeScore'  : machinetypeResults[machinetypeName]['score'],
                                   'machinegroupScore' : machinegroupScores[vac.shared.machinetypes[machinetypeName]['machinegroup']] } )

   # Sort by machinegroup then machinetype scores, lowest score (ie starving) types at the start of the list
   machinetypesList.sort(key=operator.itemgetter('machinegroupScore', 'machinetypeScore', 'machinetypeName'))

   vac.vacutils.logLine('Sorted machinegroup/machinetype scores: ' + str(machinetypesList))

   # Only return a plain list of machinetype names, not the dictionaries with scores
   return [ machinetype['machinetypeName'] for machinetype in machinetypesList ]

def vacOneCycle():

   # Update factory heartbeat file
   vac.vacutils.createFile('/var/lib/vac/factory-heartbeat', str(int(time.time())) + '\n', stat.S_IWUSR + stat.S_IRUSR + stat.S_IRGRP + stat.S_IROTH, '/var/lib/vac/tmp')

   readConfError = vac.shared.readConf(includePipes = True, updatePipes = True)
   
   if readConfError:
     vac.vacutils.logLine('Reading configuration fails with: ' + readConfError)
     return
      
   # Check we can talk to the hypervisor
   # This is important at (re)start time and lets us wait till things are ok
   try:
     conn = libvirt.open(None)
   except:
     vac.vacutils.logLine('Failed to open libvirt connection')
     return
   else:     
     conn.close()
   
   vac.shared.cleanupOldMachines()

   if vac.shared.versionLogger:
     if not os.path.exists('/var/lib/vac/factory-version-logged') or \
        time.time() > (os.stat('/var/lib/vac/factory-version-logged').st_ctime + 86400.0 / vac.shared.versionLogger):

           vac.vacutils.createFile('/var/lib/vac/factory-version-logged', '', stat.S_IWUSR + stat.S_IRUSR + stat.S_IRGRP + stat.S_IROTH, '/var/lib/vac/tmp')

           try:
             factoryMessage = vac.shared.makeFactoryResponse('0', clientName = 'vacd-factory')
             sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
             for i in range(0,5):
               sock.sendto(factoryMessage, ('vac-version-logger.gridpp.ac.uk',8884))
               time.sleep(1.0)
             sock.close()
           except:
             pass

   # Check and possibly (re)create Vac NAT network
   if not vac.shared.checkNetwork():
      # In case of unresolvable problems, we end this cycle
      return

   vac.vacutils.logLine('At most ' + str(vac.shared.numMachineSlots) + ' VMs can be created on this VM factory')
   vac.vacutils.logLine('Machine types configuration: ' + str(vac.shared.machinetypes))
   vac.vacutils.logLine('Factories in the space ' + vac.shared.spaceName + ': ' + str(vac.shared.factories))
   
   # These are updated at the END of each cycle of the for loop
   # --> So we do not use  continue  within this loop! <--
   runningProcessors    = 0
   runningCount   = 0
   runningHS06    = 0.0
   superslots     = {}
   
   vacDiskStatFS = os.statvfs('/var/lib/vac')
   if vacDiskStatFS.f_bavail * vacDiskStatFS.f_frsize < 1024 * 1024 * 1024:
     vac.vacutils.logLine('Less than 1 GB space in /var/lib/vac - will not try creating new VMs')
     ableToStartOne = False
   
   lowestFreeSlot = None
   
   for ordinal in range(vac.shared.numMachineSlots):
   
     vmname = vac.shared.nameFromOrdinal(ordinal)   
     vm     = vac.shared.VacVM(ordinal)
     
     if vm.shutdownMessage and (vm.shutdownMessage[0] == '3'):
      vac.vacutils.logLine(vm.name + ' is ' + vm.state + ' (' + str(vm.processors) + ' ' + str(vm.machinetypeName) + ' "' + vm.shutdownMessage + '" ' + str(vm.uuidStr) + 
                           ') Minimum ' + str(vm.machinetypeName) + ' fizzle_seconds=' + str(vm.heartbeat - vm.started) + ' ?')
     elif vm.shutdownMessage:
      vac.vacutils.logLine(vm.name + ' is ' + vm.state + ' (' + str(vm.processors) + ' ' + str(vm.machinetypeName) + ' "' + vm.shutdownMessage + '" ' + str(vm.uuidStr) + ')')
     else:
      vac.vacutils.logLine(vm.name + ' is ' + vm.state + ' (' + str(vm.processors) + ' ' + str(vm.machinetypeName) + ' "" ' + str(vm.uuidStr) + ')')
     
     if vm.state == vac.shared.VacState.running:
       # VM is happily running so we redo the machine's heartbeat file
       vm.createHeartbeatFile()
       
       if vac.shared.shutdownTime and (not vm.shutdownTime or (vac.shared.shutdownTime < vm.shutdownTime)):       
         vm.shutdownTime = vac.shared.shutdownTime

         # need to reduce shutdowntime in the VM
         try:
           vac.vacutils.createFile(vm.machinesDir() + '/machinefeatures/shutdowntime',
                                    str(vm.shutdownTime),
                                    stat.S_IWUSR + stat.S_IRUSR + stat.S_IRGRP + stat.S_IROTH, '/var/lib/vac/tmp')

           vac.vacutils.createFile(vm.machinesDir() + '/jobfeatures/shutdowntime_job',
                                    str(vm.shutdownTime),
                                    stat.S_IWUSR + stat.S_IRUSR + stat.S_IRGRP + stat.S_IROTH, '/var/lib/vac/tmp')
         except:
           pass

       # ah, but are WE happy that it is still running?
       try:
           if int(time.time()) > vm.shutdownTime:
             vac.vacutils.logLine('VM ' + vm.name + ' has passed shutdowntime without stopping - destroying!')
             vm.destroyVM()
       except:
           pass
       
       # if the machinetype is still defined in the configuration and     
       # a heartbeat_file is defined for this machinetype and fizzle_seconds is non-zero
       # and fizzle_seconds time has passed since the VM started...
       if vm.machinetypeName in vac.shared.machinetypes and \
          'heartbeat_file' in vac.shared.machinetypes[vm.machinetypeName] and \
          (vac.shared.machinetypes[vm.machinetypeName]['fizzle_seconds'] > 0) and \
          (int(time.time()) > (vm.started + vac.shared.machinetypes[vm.machinetypeName]['fizzle_seconds'])) and \
          (int(time.time()) > mjfHttpdStartTime + vac.shared.machinetypes[vm.machinetypeName]['fizzle_seconds']):

          if vm.joboutputsHeartbeat is None:
              # destroy VM if file does not exist (even if heartbeat_seconds is zero)
              vac.vacutils.logLine('VM ' + vm.name + ' has passed fizzle_seconds (' + 
                        str(vac.shared.machinetypes[vm.machinetypeName]['fizzle_seconds']) + ') but no heartbeat file (' + 
                        vac.shared.machinetypes[vm.machinetypeName]['heartbeat_file'] + ') has been created - destroying!')
              vm.destroyVM('700 Heartbeat file not created')
          elif (vac.shared.machinetypes[vm.machinetypeName]['heartbeat_seconds'] > 0) and \
               (int(time.time()) > (vm.joboutputsHeartbeat + vac.shared.machinetypes[vm.machinetypeName]['heartbeat_seconds'])):
              # if heartbeat_seconds is set, we check the file is recent
              vac.vacutils.logLine('VM ' + vm.name + ' has gone ' + str(int(time.time()) - vm.joboutputsHeartbeat) + 
                          ' seconds without updating heartbeat file (' + 
                          vac.shared.machinetypes[vm.machinetypeName]['heartbeat_file'] + ') - destroying!')
              vm.destroyVM('700 Heartbeat file not updated')

     elif vm.state == vac.shared.VacState.zombie:
       # VM running but no corresponding vac directory structure
       # We kill zombies on sight! 
       vac.vacutils.logLine('VM ' + vm.name + ' running without vac directories - destroying!')
       vm.destroyVM()
       
     elif vm.state == vac.shared.VacState.paused:
       # Suspended internally somehow? kill it to be safe
       vac.vacutils.logLine('VM ' + vm.name + ' paused without shutting down - destroying!')
       vm.destroyVM()

     if vm.state == vac.shared.VacState.starting and vm.machinetypeName:
       # If VM is still starting and we've come round again, then starting failed! So we clean up
       vac.vacutils.logLine('VM ' + vm.name + ' still in starting state in a new cycle - cleaning up!')
       vm.destroyVM()

     if vm.state == vac.shared.VacState.shutdown:      
       if vm.created and not vm.finished:
         # destroyVM() makes the finished file so we don't keep doing this
         vm.destroyVM()
       
         if vm.started:
           vm.writeApel()
           vm.sendVacMon()
           vac.vacutils.logLine('Create finished file for VM ' + vm.name)
           vm.createFinishedFile()

         else:
           vac.vacutils.logLine('Create finished file for only-starting VM ' + vm.name)
           vm.createFinishedFile()
  
       if lowestFreeSlot is None:
         lowestFreeSlot = ordinal

     if vm.state == vac.shared.VacState.running:
       runningProcessors += vm.processors
       
       if vm.hs06:
         runningHS06 += vm.hs06
       else:
         runningHS06 += 1.0 * vm.processors
       
       if vm.shutdownTime in superslots:
         superslots[vm.shutdownTime] += vm.processors
       else:
         superslots[vm.shutdownTime]  = vm.processors

     # the destroyVM method updates VacVM.state
     if vm.state == vac.shared.VacState.running:
       runningCount += 1
  
   # finished with all VMs, so output counts for Nagios etc
   vac.vacutils.createFile('/var/lib/vac/counts', '%d %d %d %d %.2f' % (runningCount,vac.shared.numMachineSlots,runningProcessors,vac.shared.numProcessors,runningHS06), stat.S_IWUSR + stat.S_IRUSR + stat.S_IRGRP + stat.S_IROTH, '/var/lib/vac/tmp')

   # Try to create new VM
   vac.vacutils.logLine('Start a VM creation attempt (only one this cycle)')
   
   vac.vacutils.logLine('Superslots: ' + str(superslots))

   # See if we can start a VM 
   if vac.shared.loadAvg() > (vac.shared.overloadPerProcessor * vac.shared.processorCount):
     # processorCount is all logical processors on this factory
     vac.vacutils.logLine('VM not created as load average is > overload_per_processor (' + str(vac.shared.overloadPerProcessor) + ') * processorCount (' + str(vac.shared.processorCount) + ')')
   elif vac.shared.shutdownTime and (vac.shared.shutdownTime < int(time.time())):
     vac.vacutils.logLine('VM not created as shutdown_time = ' + str(vac.shared.shutdownTime) + ' has already passed')
   elif runningProcessors >= vac.shared.numProcessors:
     # numProcessors is the number of logical processors which can be allocated to VMs
     vac.vacutils.logLine('VM not created due to total_processors or /proc/cpuinfo limit (' + str(vac.shared.numProcessors) + ')')
   else:  
     vac.vacutils.logLine('Query factories and try to recreate ' + vm.name)
                          
     eligibleMachinetypeNames = pollFactories()

     if eligibleMachinetypeNames:
       chosenMachinetypeName = None
     
       # Running total of available processors: decreases as we allocate them to existing Super Slots
       freeProcessors = vac.shared.numProcessors - runningProcessors
     
       for superslotTime in sorted(superslots):
         if superslots[superslotTime] % vac.shared.processorsPerSuperslot == 0:
           # This superslot is already complete (modulo in case > 1 identical superslots)
           continue
       
         # How many processors would be needed to complete superslot (modulo processorsPerSuperslot in case of > 1 identical superslots
         # and limited by the number of free processors overall)
         freeSuperslotProcessors = min(freeProcessors, vac.shared.processorsPerSuperslot - superslots[superslotTime] % vac.shared.processorsPerSuperslot)
                  
         # Reduce the total of available processors by the same amount: they belong to this superslot now
         freeProcessors -= freeSuperslotProcessors

         for machinetypeName in eligibleMachinetypeNames:
           # Check processor and time limits
           
           if freeSuperslotProcessors >= vac.shared.machinetypes[machinetypeName]['min_processors'] and \
              superslotTime - time.time() >= vac.shared.machinetypes[machinetypeName]['min_wallclock_seconds'] and \
              superslotTime - time.time() <= vac.shared.machinetypes[machinetypeName]['max_wallclock_seconds']:
             # Found a match, so record this              
             chosenMachinetypeName = machinetypeName
             chosenProcessors      = min(freeSuperslotProcessors, vac.shared.machinetypes[machinetypeName]['max_processors'])
             chosenShutdownTime    = superslotTime
             vac.vacutils.logLine('Creating VM in existing superslot finishing at %d with %d/%d processors' % (chosenShutdownTime, superslots[superslotTime], vac.shared.processorsPerSuperslot))
             break

         if chosenMachinetypeName:
           break          

       # If can't add to an existing superslot, try to create a new one out of freeProcessors
       if not chosenMachinetypeName and freeProcessors > 0:
         for machinetypeName in eligibleMachinetypeNames:
           # Check processor and time limits
           if freeProcessors >= vac.shared.machinetypes[machinetypeName]['min_processors']:
             # Found a match, so record this
             chosenMachinetypeName = machinetypeName
             chosenProcessors      = min(freeProcessors, vac.shared.machinetypes[machinetypeName]['max_processors'])
             chosenShutdownTime    = int(time.time()) + vac.shared.machinetypes[machinetypeName]['max_wallclock_seconds']
             vac.vacutils.logLine('Creating VM in a new superslot finishing at ' + str(chosenShutdownTime))
             break

       if chosenMachinetypeName:
         vmname = vac.shared.nameFromOrdinal(lowestFreeSlot)
         vm     = vac.shared.VacVM(lowestFreeSlot)

         vac.vacutils.logLine('Create ' + vm.name + ' with machinetype ' + chosenMachinetypeName + ' and ' + str(chosenProcessors) + ' processor(s)')
         createError = vm.createVM(chosenMachinetypeName, chosenProcessors, chosenShutdownTime)

         if createError:
           vac.vacutils.logLine('VM creation fails with: ' + createError)
           vac.vacutils.createFile('/var/lib/vac/factory-error', 'VM creation fails with: ' + createError, stat.S_IWUSR + stat.S_IRUSR + stat.S_IRGRP + stat.S_IROTH, '/var/lib/vac/tmp')
         else:
           # We update factory heartbeat after creating a VM in case that took a while
           vac.vacutils.logLine('VM ' + vm.name + ' created')
           vac.vacutils.createFile('/var/lib/vac/factory-heartbeat', str(int(time.time())) + '\n', stat.S_IWUSR + stat.S_IRUSR + stat.S_IRGRP + stat.S_IROTH, '/var/lib/vac/tmp')

           # If no VM creation errors, then cleanup any old message   
           try:
             os.remove('/var/lib/vac/factory-error')
           except OSError:
            pass
       else:
         vac.vacutils.logLine('No machinetype suitable for creation in this cycle')

     else:
       vac.vacutils.logLine('No machinetype eligible for creation in this cycle')

   if vac.shared.vacmons:
     # Send VacQuery machinetype and factory messages to listed VacMons
     machinetypeMessages = vac.shared.makeMachinetypeResponses('0', clientName = 'vacd-factory')
     factoryMessage = vac.shared.makeFactoryResponse('0', clientName = 'vacd-factory')
     sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

     for vacmonHostPort in vac.shared.vacmons:
       (vacmonHost, vacmonPort) = vacmonHostPort.split(':')

       sock.sendto(factoryMessage, (vacmonHost,int(vacmonPort)))

       for machinetypeMessage in machinetypeMessages:
         sock.sendto(machinetypeMessage, (vacmonHost,int(vacmonPort)))

     sock.close()       

def vacResponder():

   si = file('/dev/null', 'r')
   os.dup2(si.fileno(), sys.stdin.fileno())

   so = file('/var/log/vacd-responder', 'a+')
   os.dup2(so.fileno(), sys.stdout.fileno())
          
   se = file('/var/log/vacd-responder', 'a+', 0)     
   os.dup2(se.fileno(), sys.stderr.fileno())
 
   vac.vacutils.createFile('/var/lib/vac/responder.pid', str(os.getpid()) + '\n', stat.S_IWUSR + stat.S_IRUSR + stat.S_IRGRP + stat.S_IROTH, '/var/lib/vac/tmp')

   sock = None

   vac.vacutils.logLine('Start new vac responder main loop')
   
   vac.vacutils.setProcessName('vacd-responder')

   while True:
     try:
       pr = open('/var/lib/vac/responder.pid', 'r')
       pid = int(pr.read().strip())
       pr.close()
       
       if pid != os.getpid():
         vac.vacutils.logLine('os.getpid ' + os.getpid() + ' does not match responder.pid ' + pid + ' - exiting')
         break
                         
     except:
       vac.vacutils.logLine('no responder.pid - exiting')
       break

     responderPid = os.fork()
     if responderPid != 0:
       vac.vacutils.logLine('Start new vac responder subprocess: ' + str(responderPid))
       os.waitpid(responderPid, 0)

     else:
       for n in xrange(1,100):
         try:
           close(so)
         except:
           pass
           
         so = file('/var/log/vacd-responder', 'a+')
         os.dup2(so.fileno(), sys.stdout.fileno())
          
         try:
           close(se)
         except:
           pass

         se = file('/var/log/vacd-responder', 'a+', 0)     
         os.dup2(se.fileno(), sys.stderr.fileno())

         if sock is None:
           sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
           vac.shared.setSockBufferSize(sock)
           sock.settimeout(60.0)

           try:
             sock.bind(('', 995))
           except Exception as e:
             sock = None
             vac.vacutils.logLine('Failed to bind to vac responder port 995: ' + str(e))
             time.sleep(60.0)
             continue
   
         readConfError = vac.shared.readConf(includePipes = True)
  
         if readConfError:
           vac.vacutils.logLine('Reading configuration fails with: ' + readConfError)
           time.sleep(60.0)
           continue

         # so log file is updated before we start waiting        
         sys.stdout.flush()
         sys.stderr.flush()

         # Update responder heartbeat file
         vac.vacutils.createFile('/var/lib/vac/responder-heartbeat', str(int(time.time())) + '\n', stat.S_IWUSR + stat.S_IRUSR + stat.S_IRGRP + stat.S_IROTH, '/var/lib/vac/tmp')

         try:
           data, addr = sock.recvfrom(1024)
         except socket.error as msg:
           continue

         try:
           queryMessage = json.loads(data)
         except:
           continue

         if ('cookie' in queryMessage and
             'space'  in queryMessage and 
             queryMessage['space']  == vac.shared.spaceName):
          
             vac.vacutils.logLine("Received " + data + " from " + str(addr))
  
             if ('method' in queryMessage and queryMessage['method'] == 'machines') or \
                ('message_type' in queryMessage and queryMessage['message_type'] == 'machines_query'):
               timeNow = int(time.time())
               for ordinal in range(vac.shared.numMachineSlots):
                 response = vac.shared.makeMachineResponse(queryMessage['cookie'], ordinal, clientName = 'vacd-responder', timeNow = timeNow)
                 try:
                   sock.sendto(response, addr)
                 except Exception as e:
                   print str(e)

             elif ('method' in queryMessage and queryMessage['method'] == 'machinetypes') or \
                  ('message_type' in queryMessage and queryMessage['message_type'] == 'machinetypes_query'):
               for response in vac.shared.makeMachinetypeResponses(queryMessage['cookie'], clientName = 'vacd-responder'):
                 try:
                   sock.sendto(response, addr)
                 except Exception as e:
                   print str(e)

             elif ('method' in queryMessage and queryMessage['method'] == 'factories') or \
                  ('message_type' in queryMessage and queryMessage['message_type'] == 'factory_query'):
               try:
                 sock.sendto(vac.shared.makeFactoryResponse(queryMessage['cookie'], clientName = 'vacd-responder'), addr)
               except:
                 pass

       sys.exit(0) # when we finish/break out of subprocess for loop then we exit

   sys.exit(0) # if we break out of main while loop then we exit

class vacHttpdHandler(BaseHTTPServer.BaseHTTPRequestHandler):
   # Base class for mjfHttpdHandler and metadataHttpHandler, each with their own self.makeBody()

   def log_message(self, format, *args):
     # Custom log message 
     sys.stderr.write("%s %d %d [%s] %s\n" %
                      (self.address_string(),                       
                       os.getpid(),
                       os.getppid(),
                       self.log_date_time_string(),
                       format%args))

   def do_GET(self):

     if not self.client_address[0].startswith(vac.shared.natPrefix):
       return

     body = None
   
     if self.client_address[0].startswith(vac.shared.natPrefix):
       try:    
         ordinal = int(self.client_address[0].split('.')[3])
       except:
         vac.vacutils.logLine('Failed to get ordinal from ' + str(self.client_address))
       else:
         try:
           createdStr, machinetypeName, uuidStr = open('/var/lib/vac/slots/' + vac.shared.nameFromOrdinal(ordinal), 'r').read().split()
           created = int(createdStr)
         except Exception as e:
           vac.vacutils.logLine('Failed to map ' + str(self.client_address) + ' to a machine slot (' + str(e) + ')')
         else:
           # makeBody comes from the correct subclass
           body = self.makeGetBody(created, machinetypeName, uuidStr, self.path)

     try:
       if body is None:
         self.send_response(404)
         self.end_headers()
       else:
         self.send_response(200)
                  
         if body.startswith('<html>'):
           self.send_header('Content-type','text/html')
         else:
           self.send_header('Content-type','text/plain')

         self.end_headers()
         self.wfile.write(body)
     except Exception as e:
       vac.vacutils.logLine('Sending HTTP response fails with exception ' + str(e))

class mjfHttpdHandler(vacHttpdHandler):

 # def do_GET(self): is in the vacHttpdHandler class and calls makeGetBody() here
      
   def makeGetBody(self, created, machinetypeName, uuidStr, path):
     return vac.shared.makeMjfBody(created, machinetypeName, uuidStr, path)

   def do_PUT(self):
   
     if not self.client_address[0].startswith(vac.shared.natPrefix):
       return

     success = False
        
     try:
       body = self.rfile.read(int(self.headers['Content-Length']))
     except:
       body = None         
     else:
       try:    
           ordinal = int(self.client_address[0].split('.')[3])
       except:
           vac.vacutils.logLine('Failed to get ordinal from ' + str(self.client_address))
       else:
           try:
             createdStr, machinetypeName, uuidStr = open('/var/lib/vac/slots/' + vac.shared.nameFromOrdinal(ordinal), 'r').read().split()
             created = int(createdStr)
           except Exception as e:
             vac.vacutils.logLine('Failed to map ' + str(self.client_address) + ' to a machine slot (' + str(e) + ')')
           else:         
             success = vac.shared.writePutBody(created, machinetypeName, uuidStr, self.path, body)

     try:
       if success:
         self.send_response(201)
         self.end_headers()
       else:       
         self.send_response(403)
         self.end_headers()
     except Exception as e:
       vac.vacutils.logLine('Sending HTTP response fails with exception ' + str(e))

class metadataHttpdHandler(vacHttpdHandler):

 # def do_GET(self): is in the vacHttpdHandler class and calls makeGetBody() here

   def makeGetBody(self, created, machinetypeName, uuidStr, path):
      return vac.shared.makeMetadataBody(created, machinetypeName, uuidStr, path)
            
class ForkingHTTPServer(SocketServer.ForkingMixIn, BaseHTTPServer.HTTPServer):
   
   request_queue_size = 256

#   def server_bind(self):
#      BaseHTTPServer.HTTPServer.server_bind(self)
#      # Socket only waits for 300 seconds at a time: so heartbeat can be written etc
#      self.socket.settimeout(300)
      
def vacHttpd(idStr):
   # idStr is 'metadata' or 'mjf'

   si = file('/dev/null', 'r')
   os.dup2(si.fileno(), sys.stdin.fileno())

   so = file('/var/log/vacd-' + idStr, 'a+')
   os.dup2(so.fileno(), sys.stdout.fileno())
          
   se = file('/var/log/vacd-' + idStr, 'a+', 0)
   os.dup2(se.fileno(), sys.stderr.fileno())
 
   vac.vacutils.createFile('/var/lib/vac/' + idStr + '.pid', str(os.getpid()) + '\n', stat.S_IWUSR + stat.S_IRUSR + stat.S_IRGRP + stat.S_IROTH, '/var/lib/vac/tmp')

   vac.vacutils.logLine('vac ' + idStr + ' (httpd) starts')
   
   vac.vacutils.setProcessName('vacd-' + idStr)
 
   if idStr == 'mjf':
     try:
       httpd = ForkingHTTPServer((vac.shared.mjfAddress, 80), mjfHttpdHandler)
     except Exception as e:
       print str(e)
       return
   elif idStr == 'metadata':
     try:
       httpd = ForkingHTTPServer((vac.shared.metaAddress, 80), metadataHttpdHandler)
     except Exception as e:
       print str(e)
       return
   else:
     vac.vacutils.logLine('vacHttpd(only metadata or mjf) !!')
     sys.exit(0)
     
   while True:
   
     try:
       close(so)
     except:
       pass
           
     so = file('/var/log/vacd-' + idStr, 'a+')
     os.dup2(so.fileno(), sys.stdout.fileno())
          
     try:
       close(se)
     except:
       pass

     se = file('/var/log/vacd-' + idStr, 'a+', 0)
     os.dup2(se.fileno(), sys.stderr.fileno())

     try:
       pr = open('/var/lib/vac/' + idStr + '.pid', 'r')
       pid = int(pr.read().strip())
       pr.close()
       
       if pid != os.getpid():
         vac.vacutils.logLine('os.getpid ' + os.getpid() + ' does not match ' + idStr + '.pid ' + pid + ' - exiting')
         sys.exit(0)

     except:
       vac.vacutils.logLine('no ' + idStr + '.pid - exiting')
       sys.exit(0)

     # so log file is updated before we start waiting        
     sys.stdout.flush()
     sys.stderr.flush()

     # Update httpd heartbeat file
     vac.vacutils.createFile('/var/lib/vac/' + idStr + '-heartbeat', str(int(time.time())) + '\n', stat.S_IWUSR + stat.S_IRUSR + stat.S_IRGRP + stat.S_IROTH, '/var/lib/vac/tmp')

     httpd.handle_request()

def vacFactory():
        
    try:
      os.remove('/var/lib/vac/factory-version-logged')
    except:
      pass

    vac.vacutils.createFile('/var/lib/vac/factory.pid', str(os.getpid()) + '\n', stat.S_IWUSR + stat.S_IRUSR + stat.S_IRGRP + stat.S_IROTH, '/var/lib/vac/tmp')
          
    vac.vacutils.setProcessName('vacd-factory')

    si = file('/dev/null', 'r')
    os.dup2(si.fileno(), sys.stdin.fileno())

    while True:
          
            try:
              close(so)
            except:
              pass
           
            so = file('/var/log/vacd-factory', 'a+')
            os.dup2(so.fileno(), sys.stdout.fileno())
          
            try:
              close(se)
            except:
              pass

            se = file('/var/log/vacd-factory', 'a+', 0)     
            os.dup2(se.fileno(), sys.stderr.fileno())

            try:
               pf = open('/var/lib/vac/factory.pid', 'r')
               pid = int(pf.read().strip())
               pf.close()
       
               if pid != os.getpid():
                 print 'new factory.pid - exiting'
                 break
                
            except:
               print 'no factory.pid - exiting'
               break

            # Fork a subprocess to run each cycle
            cyclePid = os.fork()
        
            # Otherwise each subprocess starts from the same point in the sequence!
            random.seed()

            if cyclePid == 0:
              vac.vacutils.logLine('=============== Start cycle ===============')
              vacOneCycle()
              vac.vacutils.logLine('================ End cycle ================')
              sys.exit(0)

            # wait for cyclePid subprocess to finish
            os.waitpid(cyclePid, 0)

            time.sleep(60)
 
    sys.exit(0) # if we break out of the while loop, then we exit
#
# PROGRAM MAIN !!!
# 

libvirt.registerErrorHandler(vacLibvirtErrorHandler, 'context')

if __name__ == '__main__':

    # Used when deciding whether to enforce VM heartbeat frequency
    mjfHttpdStartTime = int(time.time())

    if (os.fork() != 0):
      sys.exit() # first parent

    else:
      os.chdir("/")
      os.umask(0) 

      if os.fork() != 0:
        sys.exit() # second parent

      else:
             
        if os.fork() == 0:

          os.setsid()
          # vacResponder() contains a retry loop for start failures
          vacResponder()

        elif os.fork() == 0:

          os.setsid()          
          # If server fails to start (eg can't bind) then keep trying
          while True:
            vacHttpd('mjf')
            time.sleep(10)

        elif os.fork() == 0:

          os.setsid()
          # If server fails start (eg can't bind) then keep trying
          while True:
            vacHttpd('metadata')
            time.sleep(10)

        else:
        
          os.setsid()
          vacFactory()
