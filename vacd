#!/usr/bin/python
#
#  vacd - Vac daemon which runs on factory nodes
#
#  Andrew McNab, University of Manchester.
#  Copyright (c) 2013-6. All rights reserved.
#
#  Redistribution and use in source and binary forms, with or
#  without modification, are permitted provided that the following
#  conditions are met:
#
#    o Redistributions of source code must retain the above
#      copyright notice, this list of conditions and the following
#      disclaimer. 
#    o Redistributions in binary form must reproduce the above
#      copyright notice, this list of conditions and the following
#      disclaimer in the documentation and/or other materials
#      provided with the distribution. 
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
#  CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
#  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
#  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
#  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
#  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
#  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
#  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
#  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.
#
#  Contacts: Andrew.McNab@cern.ch  http://www.gridpp.ac.uk/vac/
#

import re
import uuid
import os
import errno
import sys
import json
import time
import subprocess
import socket
import shutil
import tempfile
import hashlib
import base64
import multiprocessing
import stat
import random
import BaseHTTPServer
import SocketServer

import libvirt

import vac

mjfHttpdStartTime = 0

def vacLibvirtErrorHandler(ctxt, err):
    global errno    
    errno = err            
      
def pollFactories():

   responses = vac.shared.sendMachinetypesRequests(clientName = 'vacd-factory')

   # Total HS06 of running/starting VMs per machinetype
   factoryMachinetypeTotals             = {}
   
   # Time in Unix seconds of the most recent abort, for each machinetype
   factoryMachinetypeLastAborts         = {}
   
   # Number of VMs starting or not yet running for at least fizzle_seconds, for each machinetype
   factoryMachinetypeNumberBeforeFizzle = {}

   # Go through the machinetypes and their responses from the factories
   for machinetypeName in vac.shared.machinetypes:
     if vac.shared.machinetypes[machinetypeName]['share'] <= 0.0:
       continue

     factoryMachinetypeTotals[machinetypeName]             = 0.0
     factoryMachinetypeLastAborts[machinetypeName]         = 0
     factoryMachinetypeNumberBeforeFizzle[machinetypeName] = 0

     for factoryName in responses:
       try:
         response = responses[factoryName]['machinetypes'][machinetypeName]
       except:
         continue

       # we only have to add hs06/share for this machinetype to get normalisation at the end automatically
       factoryMachinetypeTotals[machinetypeName] += response['total_hs06'] / vac.shared.machinetypes[machinetypeName]['share']
       vac.vacutils.logLine(factoryName + ' responds, running total for ' + machinetypeName +
                            ' now ' + str(factoryMachinetypeTotals[machinetypeName]))
                               
       factoryMachinetypeNumberBeforeFizzle[machinetypeName] += response['num_before_fizzle']

       try:
         # if message with code provided, then we always use it for decisions
         messagecode = int(response['shutdown_message'][0:3])
       except:
         pass
       else:
         if (messagecode >= 300) and (messagecode <= 699):
           # This is an abort!
           #
           # 300 is no work, 400 is banned, 500 is problem with VM/Site
           # 600 is grid-wide problem with job agent or application in VM
           # (VMs can return 700 for transient problems within the VM)
           
           # If this is the most recent abort of this machinetype anywhere in this space
           if response['shutdown_time'] > factoryMachinetypeLastAborts[machinetypeName]:
             factoryMachinetypeLastAborts[machinetypeName] = response['shutdown_time']
                      
   vac.vacutils.logLine('Final totals ' + str(factoryMachinetypeTotals) + ' HS06')

   preferredMachinetypeName = None

   # Go through the machinetypes, trying to pick the best one to start:
   # - Target share must be > 0.0
   # - If there has been an abort, it must be at least backoff_second ago
   # - We extend this backoff by fizzle_seconds if any other VMs of this
   #     machinetype are starting or not yet running for fizzle_seconds
   #
   # This procedure aims to give one VM the chance to try a machinetype when the
   # initial backoff_seconds following an abort expires. Rather than have
   # many VMs all trying to run as machinetype immediately. In practice, more 
   # than one may win the race to be the "first" to try, but this should
   # still be a manageable number for the experiment's Matcher/Task Queue. 
      
   for machinetypeName, machinetype in vac.shared.machinetypes.iteritems():
      if machinetype['share'] > 0.0:
           vac.vacutils.logLine('For ' + machinetypeName + ', ' +
                                str(factoryMachinetypeNumberBeforeFizzle[machinetypeName]) + ' are before fizzle_time. ' +
                                'LastAbort was ' + time.strftime('%b %d %H:%M:%S', time.localtime(factoryMachinetypeLastAborts[machinetypeName])) +
                                '. VM creation restart at ' +
                                time.strftime('%b %d %H:%M:%S',
                                              time.localtime(factoryMachinetypeLastAborts[machinetypeName] +
                                                             machinetype['backoff_seconds'] +
                                                             vac.shared.machinetypes[machinetypeName]['fizzle_seconds'] * (factoryMachinetypeNumberBeforeFizzle[machinetypeName] > 0))) + 
                                '.')

      if ((machinetype['share'] > 0.0) and 
          ((vac.shared.shutdownTime is None) or (time.time() + vac.shared.machinetypes[machinetypeName]['min_wallclock_seconds'] < vac.shared.shutdownTime)) and
          (factoryMachinetypeLastAborts[machinetypeName] 
              < (int(time.time()) 
                 - machinetype['backoff_seconds'] 
                 - vac.shared.machinetypes[machinetypeName]['fizzle_seconds'] * (factoryMachinetypeNumberBeforeFizzle[machinetypeName] > 0)))):
                      if not preferredMachinetypeName:
                        preferredMachinetypeName = machinetypeName
                      elif factoryMachinetypeTotals[machinetypeName] < factoryMachinetypeTotals[preferredMachinetypeName]:
                        preferredMachinetypeName = machinetypeName

   return preferredMachinetypeName

def vacOneCycle():

   # Update factory heartbeat file
   vac.vacutils.createFile('/var/lib/vac/factory-heartbeat', str(int(time.time())) + '\n', stat.S_IWUSR + stat.S_IRUSR + stat.S_IRGRP + stat.S_IROTH, '/var/lib/vac/tmp')

   readConfError = vac.shared.readConf()
   
   if readConfError:
     vac.vacutils.logLine('Reading configuration fails with: ' + readConfError)
     return
      
   # Check we can talk to the hypervisor
   # This is important at (re)start time and lets us wait till things are ok
   try:
     conn = libvirt.open(None)
   except:
     vac.vacutils.logLine('Failed to open libvirt connection')
     return
   else:     
     conn.close()
   
   vac.shared.cleanupOldMachines()

   if vac.shared.versionLogger:
     if not os.path.exists('/var/lib/vac/factory-version-logged') or \
        time.time() > (os.stat('/var/lib/vac/factory-version-logged').st_ctime + 86400.0 / vac.shared.versionLogger):

           vac.vacutils.createFile('/var/lib/vac/version-logged', '', stat.S_IWUSR + stat.S_IRUSR + stat.S_IRGRP + stat.S_IROTH, '/var/lib/vac/tmp')

           try:
             factoryMessage = vac.shared.makeFactoryResponse('0', clientName = 'vacd-factory')
             sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) 
             sock.sendto(factoryMessage, ('vac-version-logger.gridpp.ac.uk',8884))
             sock.close()       
           except:
             pass

   # Check and possibly (re)create Vac NAT network
   if not vac.shared.checkNetwork():
      # In case of unresolvable problems, we end this cycle
      return

   vac.vacutils.logLine('At most ' + str(vac.shared.numMachineSlots) + ' VMs can be created on this VM factory')
   vac.vacutils.logLine('Machine types configuration: ' + str(vac.shared.machinetypes))
   vac.vacutils.logLine('Factories in the space ' + vac.shared.spaceName + ': ' + str(vac.shared.factories))
   
   # These are updated at the END of each cycle of the for loop
   # --> So we do not use  continue  within this loop! <--
   runningCpus    = 0
   runningCount   = 0
   ableToStartOne = True
   
   vacDiskStatFS = os.statvfs('/var/lib/vac')
   if vacDiskStatFS.f_bavail * vacDiskStatFS.f_frsize < 1024 * 1024 * 1024:
     vac.vacutils.logLine('Less than 1 GB space in /var/lib/vac - will not try creating new VMs')
     ableToStartOne = False
   
   for ordinal in range(vac.shared.numMachineSlots):
   
     vmname = vac.shared.nameFromOrdinal(ordinal)   
     vm     = vac.shared.VacVM(ordinal)
     
     if hasattr(vm, 'shutdownMessage') and vm.shutdownMessage and (vm.shutdownMessage[0] == '3'):
      vac.vacutils.logLine(vm.name + ' is ' + vm.state + ' (' + str(vm.machinetypeName) + ' "' + vm.shutdownMessage + '" ' + str(vm.uuidStr) + 
                           ') Minimum ' + str(vm.machinetypeName) + ' fizzle_seconds=' + str(vm.heartbeat - vm.started) + ' ?')
     elif hasattr(vm, 'shutdownMessage') and vm.shutdownMessage:
      vac.vacutils.logLine(vm.name + ' is ' + vm.state + ' (' + str(vm.machinetypeName) + ' "' + vm.shutdownMessage + '" ' + str(vm.uuidStr) + ')')
     else:
      vac.vacutils.logLine(vm.name + ' is ' + vm.state + ' (' + str(vm.machinetypeName) + ' "" ' + str(vm.uuidStr) + ')')
     
     if vm.state == vac.shared.VacState.running:
       # VM is happily running so we redo the machine's heartbeat file
       vm.createHeartbeatFile()
       
       if vac.shared.shutdownTime and (not self.shutdownTime or (vac.shared.shutdownTime < self.shutdownTime)):
         # need to reduce shutdowntime in the VM
         try:
           vac.vacutils.createFile(self.machinesDir() + '/machinefeatures/shutdowntime',
                                    str(vac.shared.shutdownTime),
                                    stat.S_IWUSR + stat.S_IRUSR + stat.S_IRGRP + stat.S_IROTH, '/var/lib/vac/tmp')

           vac.vacutils.createFile(self.machinesDir() + '/jobfeatures/shutdowntime_job',
                                    str(vac.shared.shutdownTime),
                                    stat.S_IWUSR + stat.S_IRUSR + stat.S_IRGRP + stat.S_IROTH, '/var/lib/vac/tmp')
         except:
           pass

       # ah, but are WE happy that it is still running?
       try:
           if int(time.time()) > vm.shutdownTime:
             vac.vacutils.logLine('VM ' + vm.name + ' has passed shutdowntime without stopping - destroying!')
             vm.destroyVM()
       except:
           pass
           
       # if a heartbeat_file is defined for this machinetype and fizzle_seconds is non-zero
       # and fizzle_seconds time has passed since the VM started...
       if 'heartbeat_file' in vac.shared.machinetypes[vm.machinetypeName] and \
          (vac.shared.machinetypes[vm.machinetypeName]['fizzle_seconds'] > 0) and \
          (int(time.time()) > (vm.started + vac.shared.machinetypes[vm.machinetypeName]['fizzle_seconds'])):

          if (int(time.time()) > mjfHttpdStartTime + vac.shared.machinetypes[vm.machinetypeName]['fizzle_seconds']) and \
             vm.joboutputsHeartbeat is None:
            #  destroy VM if file does not exist (even if heartbeat_seconds is zero)
            vac.vacutils.logLine('VM ' + vm.name + ' has passed fizzle_seconds (' + 
                        str(vac.shared.machinetypes[vm.machinetypeName]['fizzle_seconds']) + ') but no heartbeat file (' + 
                        vac.shared.machinetypes[vm.machinetypeName]['heartbeat_file'] + ') has been created - destroying!')
            vm.destroyVM('700 Heartbeat file not created')
          else:
            # if heartbeat_seconds is set, we check the file is recent
            if (vac.shared.machinetypes[vm.machinetypeName]['heartbeat_seconds'] > 0) and \
               (int(time.time()) > (vm.joboutputsHeartbeat + vac.shared.machinetypes[vm.machinetypeName]['heartbeat_seconds'])) and \
               (int(time.time()) > (mjfHttpdStartTime + vac.shared.machinetypes[vm.machinetypeName]['heartbeat_seconds'])):
              vac.vacutils.logLine('VM ' + vm.name + ' has gone ' + str(int(time.time()) - vm.joboutputsHeartbeat) + 
                          ' seconds without updating heartbeat file (' + 
                          vac.shared.machinetypes[vm.machinetypeName]['heartbeat_file'] + ') - destroying!')
              vm.destroyVM('700 Heartbeat file not updated')

     elif vm.state == vac.shared.VacState.zombie:
       # VM running but no corresponding vac directory structure
       # We kill zombies on sight! 
       vac.vacutils.logLine('VM ' + vm.name + ' running without vac directories - destroying!')
       vm.destroyVM()
       
     elif vm.state == vac.shared.VacState.paused:
       # suspended internally somehow? kill it to be safe
       vac.vacutils.logLine('VM ' + vm.name + ' paused without shutting down - destroying!')
       vm.destroyVM()

     if vm.state == vac.shared.VacState.starting and vm.machinetypeName:
       vac.vacutils.logLine('VM ' + vm.name + ' still in starting state in a new cycle - cleaning up!')
       # If VM is still starting and we've come round again, then starting failed!
       vm.state = vac.shared.VacState.shutdown
       # Something has gone wrong, so we clean up
       vm.destroyVM()

     if vm.state == vac.shared.VacState.shutdown:      
       # Delete logical volume if present
       vm.removeLogicalVolume()

       if not vm.finished:
       # Create the finished file for the responder if not already there
         vm.destroyVM()
       
         if vm.started:
               vm.writeApel()
               vac.vacutils.logLine('Create finished file for VM ' + vm.name)
               vm.createFinishedFile()

         elif vm.created:
               vac.vacutils.logLine('Create finished file for only-starting VM ' + vm.name)
               vm.createFinishedFile()
  
       # we will only start one VM per cycle
       if ableToStartOne:
         vac.vacutils.logLine('Start a VM recreation attempt (only one this cycle)')
         # Remember we've tried to start one this cycle
         ableToStartOne = False

         # as VM is shutdown, we see if we can restart it
         if vac.shared.loadAvg() > (vac.shared.overloadPerCpu * vac.shared.cpuCount):
           vac.vacutils.logLine('VM not recreated as load average is > overload_per_cpu(' + str(vac.shared.overloadPerCpu) + ') * cpu count(' + str(vac.shared.cpuCount) + ')')
         elif vac.shared.shutdownTime and (vac.shared.shutdownTime < int(time.time())):
           vac.vacutils.logLine('VM not recreated as shutdown_time = ' + str(vac.shared.shutdownTime) + ' has already passed')
         else:
           # count up the running VMs' CPUs on the this factory
           totalCpusForCount = 0
  
           for ordinal in range(vac.shared.numMachineSlots):
             vmForCount = vac.shared.VacVM(ordinal)
             if vmForCount.state == vac.shared.VacState.running:
                totalCpusForCount += vmForCount.cpus

           if (totalCpusForCount + vac.shared.cpuPerMachine) > vac.shared.numCpus:
             vac.vacutils.logLine('VM not recreated due to cpu_total or /proc/cpuinfo limit (' + str(vac.shared.numCpus) + ')')
           else:
             vac.vacutils.logLine('Query factories and try to recreate ' + vm.name)
             preferredMachinetypeName = pollFactories()

             if preferredMachinetypeName:
               vac.vacutils.logLine('Creating ' + vm.name + ' with machinetype ' + preferredMachinetypeName)
               createError = vm.createVM(preferredMachinetypeName)

               if createError:
                 vac.vacutils.logLine('VM creation fails with: ' + createError)
                 vac.vacutils.createFile('/var/lib/vac/factory-error', 'VM creation fails with: ' + createError, stat.S_IWUSR + stat.S_IRUSR + stat.S_IRGRP + stat.S_IROTH, '/var/lib/vac/tmp')
               else:
                 # We update heartbeat after creating a VM in case that took a while
                 vac.vacutils.createFile('/var/lib/vac/factory-heartbeat', str(int(time.time())) + '\n', stat.S_IWUSR + stat.S_IRUSR + stat.S_IRGRP + stat.S_IROTH, '/var/lib/vac/tmp')

                 # If no VM creation errors, then cleanup any old message   
                 try:
                   os.remove('/var/lib/vac/factory-error')
                 except OSError:
                   pass
             else:
               vac.vacutils.logLine('No machinetype suitable for creation in this cycle')

     if vm.state == vac.shared.VacState.running:
       runningCpus += vm.cpus

     # the createVM and destroyVM methods update VacVM.state
     if vm.state == vac.shared.VacState.running:
       runningCount += 1

   # finished with all VMs, so output counts for Nagios etc
   vac.vacutils.createFile('/var/lib/vac/counts', '%d %d %d %d' % (runningCount,vac.shared.numMachineSlots,runningCpus,vac.shared.numCpus), stat.S_IWUSR + stat.S_IRUSR + stat.S_IRGRP + stat.S_IROTH, '/var/lib/vac/tmp')

   if vac.shared.vacmons:
     # Send VacQuery machinetype and factory messages to listed VacMons
     machinetypeMessages = vac.shared.makeMachinetypeResponses('0')
     factoryMessage = vac.shared.makeFactoryResponse('0', clientName = 'vacd-factory')
     sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

     for vacmonHostPort in vac.shared.vacmons:
       (vacmonHost, vacmonPort) = vacmonHostPort.split(':')

       sock.sendto(factoryMessage, (vacmonHost,int(vacmonPort)))

       for machinetypeMessage in machinetypeMessages:
         sock.sendto(machinetypeMessage, (vacmonHost,int(vacmonPort)))

     sock.close()       

def vacResponder():

   si = file('/dev/null', 'r')
   os.dup2(si.fileno(), sys.stdin.fileno())

   so = file('/var/log/vacd-responder', 'a+')
   os.dup2(so.fileno(), sys.stdout.fileno())
          
   se = file('/var/log/vacd-responder', 'a+', 0)     
   os.dup2(se.fileno(), sys.stderr.fileno())
 
   vac.vacutils.createFile('/var/lib/vac/responder.pid', str(os.getpid()) + '\n', stat.S_IWUSR + stat.S_IRUSR + stat.S_IRGRP + stat.S_IROTH, '/var/lib/vac/tmp')

   sock = None

   vac.vacutils.logLine('vac responder starts')
   
   vac.vacutils.setProcessName('vacd-responder')

   while True:
   
     try:
       close(so)
     except:
       pass
           
     so = file('/var/log/vacd-responder', 'a+')
     os.dup2(so.fileno(), sys.stdout.fileno())
          
     try:
       close(se)
     except:
       pass

     se = file('/var/log/vacd-responder', 'a+', 0)     
     os.dup2(se.fileno(), sys.stderr.fileno())

     if sock is None:
       sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
       vac.shared.setSockBufferSize(sock)
       sock.settimeout(60.0)

       try:
         sock.bind(('', 995))
       except Exception as e:
         sock = None
         vac.vacutils.logLine('Failed to bind to vac-responder port 995: ' + str(e))
         time.sleep(60.0)
         continue
   
     readConfError = vac.shared.readConf()

     if readConfError:
       vac.vacutils.logLine('Reading configuration fails with: ' + readConfError)
       time.sleep(60.0)
       continue
          
     try:
       pr = open('/var/lib/vac/responder.pid', 'r')
       pid = int(pr.read().strip())
       pr.close()
       
       if pid != os.getpid():
         vac.vacutils.logLine('os.getpid ' + os.getpid() + ' does not match responder.pid ' + pid + ' - exiting')
         break
                
     except:
       vac.vacutils.logLine('no responder.pid - exiting')
       break

     # so log file is updated before we start waiting        
     sys.stdout.flush()
     sys.stderr.flush()

     # Update responder heartbeat file
     vac.vacutils.createFile('/var/lib/vac/responder-heartbeat', str(int(time.time())) + '\n', stat.S_IWUSR + stat.S_IRUSR + stat.S_IRGRP + stat.S_IROTH, '/var/lib/vac/tmp')

     try:
       data, addr = sock.recvfrom(1024)
     except socket.error as msg:
       continue

     try:
       queryMessage = json.loads(data)
     except:
       continue
     
     if ('cookie' in queryMessage and
         'space'  in queryMessage and 
         queryMessage['space']  == vac.shared.spaceName):
          
         vac.vacutils.logLine("Received " + data + " from " + str(addr))

         if ('method' in queryMessage and queryMessage['method'] == 'machines') or \
            ('message_type' in queryMessage and queryMessage['message_type'] == 'machines_query'):
           for response in vac.shared.makeMachineResponses(queryMessage['cookie'], clientName = 'vacd-responder'):
             try:
               sock.sendto(response, addr)
             except Exception as e:
               print str(e)

         elif ('method' in queryMessage and queryMessage['method'] == 'machinetypes') or \
              ('message_type' in queryMessage and queryMessage['message_type'] == 'machinetypes_query'):
           for response in vac.shared.makeMachinetypeResponses(queryMessage['cookie'], clientName = 'vacd-responder'):
             try:
               sock.sendto(response, addr)
             except Exception as e:
               print str(e)

         elif ('method' in queryMessage and queryMessage['method'] == 'factories') or \
              ('message_type' in queryMessage and queryMessage['message_type'] == 'factory_query'):
           try:
             sock.sendto(vac.shared.makeFactoryResponse(queryMessage['cookie'], clientName = 'vacd-responder'), addr)
           except:
             pass

   sys.exit(0) # if we break out of while loop then we exit

class vacHttpdHandler(BaseHTTPServer.BaseHTTPRequestHandler):
   # Base class for mjfHttpdHandler and metadataHttpHandler, each with their own self.makeBody()

   def log_message(self, format, *args):
     # Custom log message 
     sys.stderr.write("%s %d %d [%s] %s\n" %
                      (self.address_string(),                       
                       os.getpid(),
                       os.getppid(),
                       self.log_date_time_string(),
                       format%args))

   def do_GET(self):

     if not self.client_address[0].startswith(vac.shared.natPrefix):
       return

     body = None
   
     if self.client_address[0].startswith(vac.shared.natPrefix):
       try:    
         ordinal = int(self.client_address[0].split('.')[3])
       except:
         vac.vacutils.logLine('Failed to get ordinal from ' + str(self.client_address))
       else:
         try:
           createdStr, machinetypeName, uuidStr = open('/var/lib/vac/slots/' + vac.shared.nameFromOrdinal(ordinal), 'r').read().split()
           created = int(createdStr)
         except Exception as e:
           vac.vacutils.logLine('Failed to map ' + str(self.client_address) + ' to a machine slot (' + str(e) + ')')
         else:
           # makeBody comes from the correct subclass
           body = self.makeGetBody(created, machinetypeName, uuidStr, self.path)

     try:
       if body is None:
         self.send_response(404)
         self.end_headers()
       else:
         self.send_response(200)
                  
         if body.startswith('<html>'):
           self.send_header('Content-type','text/html')
         else:
           self.send_header('Content-type','text/plain')

         self.end_headers()
         self.wfile.write(body)
     except Exception as e:
       vac.vacutils.logLine('Sending HTTP response fails with exception ' + str(e))

class mjfHttpdHandler(vacHttpdHandler):

 # def do_GET(self): is in the vacHttpdHandler class and calls makeGetBody() here
      
   def makeGetBody(self, created, machinetypeName, uuidStr, path):
     return vac.shared.makeMjfBody(created, machinetypeName, uuidStr, path)

   def do_PUT(self):
   
     if not self.client_address[0].startswith(vac.shared.natPrefix):
       return

     success = False
        
     try:
       body = self.rfile.read(int(self.headers['Content-Length']))
     except:
       body = None         
     else:
       try:    
           ordinal = int(self.client_address[0].split('.')[3])
       except:
           vac.vacutils.logLine('Failed to get ordinal from ' + str(self.client_address))
       else:
           try:
             createdStr, machinetypeName, uuidStr = open('/var/lib/vac/slots/' + vac.shared.nameFromOrdinal(ordinal), 'r').read().split()
             created = int(createdStr)
           except Exception as e:
             vac.vacutils.logLine('Failed to map ' + str(self.client_address) + ' to a machine slot (' + str(e) + ')')
           else:         
             success = vac.shared.writePutBody(created, machinetypeName, uuidStr, self.path, body)

     try:
       if success:
         self.send_response(201)
         self.end_headers()
       else:       
         self.send_response(403)
         self.end_headers()
     except Exception as e:
       vac.vacutils.logLine('Sending HTTP response fails with exception ' + str(e))

class metadataHttpdHandler(vacHttpdHandler):

 # def do_GET(self): is in the vacHttpdHandler class and calls makeGetBody() here

   def makeGetBody(self, created, machinetypeName, uuidStr, path):
      return vac.shared.makeMetadataBody(created, machinetypeName, uuidStr, path)
            
class ForkingHTTPServer(SocketServer.ForkingMixIn, BaseHTTPServer.HTTPServer):
   
   request_queue_size = 256

#   def server_bind(self):
#      BaseHTTPServer.HTTPServer.server_bind(self)
#      # Socket only waits for 300 seconds at a time: so heartbeat can be written etc
#      self.socket.settimeout(300)
      
def vacHttpd(idStr):
   # idStr is 'metadata' or 'mjf'

   si = file('/dev/null', 'r')
   os.dup2(si.fileno(), sys.stdin.fileno())

   so = file('/var/log/vacd-' + idStr, 'a+')
   os.dup2(so.fileno(), sys.stdout.fileno())
          
   se = file('/var/log/vacd-' + idStr, 'a+', 0)
   os.dup2(se.fileno(), sys.stderr.fileno())
 
   vac.vacutils.createFile('/var/lib/vac/' + idStr + '.pid', str(os.getpid()) + '\n', stat.S_IWUSR + stat.S_IRUSR + stat.S_IRGRP + stat.S_IROTH, '/var/lib/vac/tmp')

   vac.vacutils.logLine('vac ' + idStr + ' (httpd) starts')
   
   vac.vacutils.setProcessName('vacd-' + idStr)
 
   if idStr == 'mjf':
     httpd = ForkingHTTPServer((vac.shared.mjfAddress, 80), mjfHttpdHandler)
   elif idStr == 'metadata':
     httpd = ForkingHTTPServer((vac.shared.factoryAddress, 80), metadataHttpdHandler)
   else:
     vac.vacutils.logLine('vacHttpd(only metadata or mjf) !!')
     sys.exit(0)
     
   while True:
   
     try:
       close(so)
     except:
       pass
           
     so = file('/var/log/vacd-' + idStr, 'a+')
     os.dup2(so.fileno(), sys.stdout.fileno())
          
     try:
       close(se)
     except:
       pass

     se = file('/var/log/vacd-' + idStr, 'a+', 0)
     os.dup2(se.fileno(), sys.stderr.fileno())

     try:
       pr = open('/var/lib/vac/' + idStr + '.pid', 'r')
       pid = int(pr.read().strip())
       pr.close()
       
       if pid != os.getpid():
         vac.vacutils.logLine('os.getpid ' + os.getpid() + ' does not match ' + idStr + '.pid ' + pid + ' - exiting')
         break

     except:
       vac.vacutils.logLine('no ' + idStr + '.pid - exiting')
       break

     # so log file is updated before we start waiting        
     sys.stdout.flush()
     sys.stderr.flush()

     # Update httpd heartbeat file
     vac.vacutils.createFile('/var/lib/vac/' + idStr + '-heartbeat', str(int(time.time())) + '\n', stat.S_IWUSR + stat.S_IRUSR + stat.S_IRGRP + stat.S_IROTH, '/var/lib/vac/tmp')

     httpd.handle_request()

   sys.exit(0) # if we break out of while loop then we exit

def vacFactory():
        
    try:
      os.remove('/var/lib/vac/factory-daily')
    except:
      pass

    vac.vacutils.createFile('/var/lib/vac/factory.pid', str(os.getpid()) + '\n', stat.S_IWUSR + stat.S_IRUSR + stat.S_IRGRP + stat.S_IROTH, '/var/lib/vac/tmp')
          
    vac.vacutils.setProcessName('vacd-factory')

    si = file('/dev/null', 'r')
    os.dup2(si.fileno(), sys.stdin.fileno())

    while True:
          
            try:
              close(so)
            except:
              pass
           
            so = file('/var/log/vacd-factory', 'a+')
            os.dup2(so.fileno(), sys.stdout.fileno())
          
            try:
              close(se)
            except:
              pass

            se = file('/var/log/vacd-factory', 'a+', 0)     
            os.dup2(se.fileno(), sys.stderr.fileno())

            try:
               pf = open('/var/lib/vac/factory.pid', 'r')
               pid = int(pf.read().strip())
               pf.close()
       
               if pid != os.getpid():
                 print 'new factory.pid - exiting'
                 break
                
            except:
               print 'no factory.pid - exiting'
               break

            # Fork a subprocess to run each cycle
            cyclePid = os.fork()
        
            # Otherwise each subprocess starts from the same point in the sequence!
            random.seed()

            if cyclePid == 0:
              vac.vacutils.logLine('=============== Start cycle ===============')
              vacOneCycle()
              vac.vacutils.logLine('================ End cycle ================')
              sys.exit(0)

            # wait for cyclePid subprocess to finish
            os.waitpid(cyclePid, 0)

            time.sleep(60)
 
    sys.exit(0) # if we break out of the while loop, then we exit
#
# PROGRAM MAIN !!!
# 

libvirt.registerErrorHandler(vacLibvirtErrorHandler, 'context')

if __name__ == '__main__':

    # Used when deciding whether to enforce VM heartbeat frequency
    mjfHttpdStartTime = int(time.time())

    if (os.fork() != 0):
      sys.exit() # first parent

    else:
      os.chdir("/")
      os.umask(0) 

      if os.fork() != 0:
        sys.exit() # second parent

      else:
             
        if os.fork() == 0:

          os.setsid()
          vacResponder()

        elif os.fork() == 0:

          os.setsid()          
          # If server fails (eg can't bind) then keep trying
          while True:
            vacHttpd('mjf')
            time.sleep(60)

        elif os.fork() == 0:

          os.setsid()
          # If server fails (eg can't bind) then keep trying
          while True:
            vacHttpd('metadata')
            time.sleep(60)

        else:
        
          os.setsid()
          vacFactory()
