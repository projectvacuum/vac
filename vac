#!/usr/bin/python
#
#  vac - Vac command line utility
#
#  Andrew McNab, University of Manchester.
#  Copyright (c) 2013-4. All rights reserved.
#
#  Redistribution and use in source and binary forms, with or
#  without modification, are permitted provided that the following
#  conditions are met:
#
#    o Redistributions of source code must retain the above
#      copyright notice, this list of conditions and the following
#      disclaimer. 
#    o Redistributions in binary form must reproduce the above
#      copyright notice, this list of conditions and the following
#      disclaimer in the documentation and/or other materials
#      provided with the distribution. 
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
#  CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
#  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
#  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
#  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
#  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
#  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
#  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
#  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.
#
#  Contacts: Andrew.McNab@cern.ch  http://www.gridpp.ac.uk/vac/
#

import os, errno, sys
import json
import time
import socket
import shutil
import hashlib,base64
import optparse

# so vac command can go in /usr/sbin
sys.path.append('/var/lib/vac/bin')

import VAC
   
def scanFactories(options, factoriesList):
   
   if factoriesList is None:
     factoriesList = VAC.factories
   
   salt = base64.b64encode(os.urandom(32))
   sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
   sock.settimeout(VAC.udpTimeoutSeconds)

   start = time.time()
   totalcount    = 0
   runningcount  = 0
   startingcount = 0

   for factoryName in factoriesList:
      sock.sendto(json.dumps({'space':VAC.spaceName,'cookie':hashlib.sha256(salt + factoryName).hexdigest(), 
                              'method':'status'}),(factoryName,995))
   while True:
   
      try:
           data, addr = sock.recvfrom(10240)
                      
           try:
                response = json.loads(data)
           except:
              print 'json.loads failed for',data
              continue
                                       
           if 'space' 			in response and \
              'vmname' 			in response and \
              'cookie' 			in response and \
              'factoryname'		in response and \
              'method'			in response and \
              'state'			in response and \
              response['space']  == VAC.spaceName and \
              response['method'] == 'status' and \
              response['cookie'] == hashlib.sha256(salt + response['factoryname']).hexdigest():
                
                stateStr = ('  ' + response['state'] + 10 * ' ')[0:11]
                
                if response['state'] == VAC.VacState.running:
                                       runningcount += 1
                elif response['state'] == VAC.VacState.starting:
                                       startingcount += 1
                totalcount += 1

                if not response['vmtype'] or not response['vmtypes']:
                  hoursStr = 22 * ' '
                  percentStr = '      '

                elif response['state'] == VAC.VacState.running:
                  hoursStr = '%5.2f hrs' % ((time.time() - response['vmtypes'][response['vmtype']]['started']) / 3600.0)

                  if response['vmtypes'][response['vmtype']]['heartbeat'] > response['vmtypes'][response['vmtype']]['started']:
                    hoursStr += ' %0.1f%%' % (100.0 * response['vmtypes'][response['vmtype']]['cpuseconds'] / float(response['vmtypes'][response['vmtype']]['heartbeat'] - response['vmtypes'][response['vmtype']]['started']))
                    
                  hoursStr +=  22 * ' '

                  if (time.time() - response['vmtypes'][response['vmtype']]['started']) > VAC.vmtypes[response['vmtype']]['fizzle_seconds']:
                    stateStr = '* Running  '

                  if 'cpupercentage' in response['vmtypes'][response['vmtype']] and response['vmtypes'][response['vmtype']]['cpupercentage'] != None:
                    percentStr = '%5.1f%%' % response['vmtypes'][response['vmtype']]['cpupercentage']
                  else:
                    percentStr = '      '

                elif response['state'] == VAC.VacState.starting:
                  hoursStr = ' %0.2f mins' % ((time.time() - response['vmtypes'][response['vmtype']]['created']) / 60.0) + 22 * ' '
                  percentStr = '      '

                elif response['state'] == VAC.VacState.shutdown and response['vmtype'] and 'message' in response['vmtypes'][response['vmtype']] and response['vmtypes'][response['vmtype']]['message']:
                  hoursStr = '"' + response['vmtypes'][response['vmtype']]['message'][0:19] + '"' + 22 * ' '
                  percentStr = '      '
                  
                else:
                  hoursStr = 22 * ' '
                  percentStr = '      '

                if len(response['vmname'].split('.')[0]) < 15:
                 vmName = (response['vmname'].split('.')[0] + 15*' ')[0:15]
                else:
                 vmName = response['vmname'].split('.')[0]

                print (
                       vmName + 
                       ((response['vmtype'] + 12 * ' ') if 'vmtype' in response else 10 * '-')[0:12] + ' ' + 
                       stateStr + '  ' + 
                       hoursStr[0:21] + 
                       percentStr + "  %.2fs" % (time.time() - start) + 
                       ((' ' + str(response['hs06'])) if options.includeHS06 and 'hs06' in response else '') +
                       ((' ' + response['version']) if options.includeVersions and 'version' in response else '')
                      )
                                         
      except KeyboardInterrupt:
           print '\n' + str(totalcount) + ' replies; ' + str(runningcount) + ' running; ' + str(startingcount) + ' starting.'
           return
      except socket.error as msg:
           break

   print totalcount,'replies in',"%.2f" % (time.time() - start - VAC.udpTimeoutSeconds),'seconds;',runningcount,'running;',startingcount,'starting.'

def queryFactory(factoryName):
   
   salt = base64.b64encode(os.urandom(32))
   sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
   sock.settimeout(VAC.udpTimeoutSeconds)

   sock.sendto(json.dumps({'space':VAC.spaceName,'cookie':hashlib.sha256(salt + factoryName).hexdigest(), 
                          'method':'status'}),(factoryName,995))

   while True:
      try:
           data, addr = sock.recvfrom(10240)
                      
           try:
                response = json.loads(data)
           except:
              print 'json.loads failed for',data
              continue
                                       
           if 'space' 			in response and \
              'vmname' 			in response and \
              'cookie' 			in response and \
              'factoryname'		in response and \
              'method'			in response and \
              'state'			in response and \
              response['space']  == VAC.spaceName and \
              response['method'] == 'status' and \
              response['cookie'] == hashlib.sha256(salt + response['factoryname']).hexdigest():
                
                stateStr = (response['state'] + 10 * ' ')[0:9]
                
                if not response['vmtype'] or not response['vmtypes']:
                  hoursStr = 22 * ' '

                elif response['state'] == VAC.VacState.running:
                  hoursStr = '%5.2f hrs' % ((time.time() - response['vmtypes'][response['vmtype']]['started']) / 3600.0)

                  if response['vmtypes'][response['vmtype']]['heartbeat'] > response['vmtypes'][response['vmtype']]['started']:
                    hoursStr += ' %0.1f%%' % (100.0 * response['vmtypes'][response['vmtype']]['cpuseconds'] / float(response['vmtypes'][response['vmtype']]['heartbeat'] - response['vmtypes'][response['vmtype']]['started']))
                    
                  hoursStr +=  22 * ' '

                  if (time.time() - response['vmtypes'][response['vmtype']]['started']) > VAC.vmtypes[response['vmtype']]['fizzle_seconds']:
                    stateStr = 'Running* '

                  if 'cpupercentage' in response['vmtypes'][response['vmtype']] and response['vmtypes'][response['vmtype']]['cpupercentage']:
                    percentStr = '%5.1f%%' % response['vmtypes'][response['vmtype']]['cpupercentage']
                  else:
                    percentStr = '      '

                elif response['state'] == VAC.VacState.starting:
                  hoursStr = ' %0.2f mins' % ((time.time() - response['vmtypes'][response['vmtype']]['created']) / 60.0) + 22 * ' '

                elif response['state'] == VAC.VacState.shutdown and response['vmtype'] and 'message' in response['vmtypes'][response['vmtype']] and response['vmtypes'][response['vmtype']]['message'] != None:
                  hoursStr = '"' + response['vmtypes'][response['vmtype']]['message'][0:19] + '"' + 22 * ' '
                  
                else:
                  hoursStr = 22 * ' '

                print str(response)

      except socket.error as msg:
           break

def rawFactory(factoryName):
   
   salt = base64.b64encode(os.urandom(32))
   sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
   sock.settimeout(VAC.udpTimeoutSeconds)

   sock.sendto(json.dumps({'space':VAC.spaceName,'cookie':hashlib.sha256(salt + factoryName).hexdigest(), 
                          'method':'status'}),(factoryName,995))

   n =1 

   while True:
      try:
           data, addr = sock.recvfrom(10240)
                      
           try:
                response = json.loads(data)
           except:
              print 'json.loads failed for',data
              continue
              
           print '===== Begin response ' + str(n) + ' ====='
              
           for responseKey in sorted(response.keys()):            
             print (responseKey + 15 * ' ')[:15] + " : " + str(response[responseKey])
             
           print
             
           n += 1

      except socket.error as msg:
           break

#
# PROGRAM MAIN !!!
# 

if __name__ == '__main__':

    parser = optparse.OptionParser(usage="usage: %prog [options] command [target]\n\nCommands:\n  scan\n  raw")

    parser.add_option("-s", 
                      "--space",
                      dest="spaceName",
                      help="override Vac space given in configuration file")

    parser.add_option("-t", 
                      "--timeout",
                      dest="udpTimeoutSeconds", 
                      help="set timeout in seconds for UDP queries")

    parser.add_option("-H", 
                      "--include-hs06",
                      action="store_true",
                      dest="includeHS06", 
                      help="include HS06 information")

    parser.add_option("-V", 
                      "--include-versions",
                      action="store_true",
                      dest="includeVersions", 
                      help="include version information")

#    parser.add_option("-f", 
#                      "--factories",
#                      dest="factories", 
#                      help="comma separated list of factory names")

    (options, args) = parser.parse_args()

    if len(args) > 0 and args[0]:
    
        readConfError = VAC.readConf()
        
        if readConfError:
# Perhaps we should try to ignore these errors in case the command
# line arguments supplement missing info in vac.conf etc? Anyway,
# for now, bad config means we do nothing.
          print 'Reading configuration fails with error: ' + readConfError
          sys.exit(1)
                
        if options.spaceName:
             VAC.spaceName = options.spaceName.strip()

        if options.udpTimeoutSeconds:
             VAC.udpTimeoutSeconds = float(options.udpTimeoutSeconds.strip())

#        if options.factories:
#             VAC.factories = options.factories.strip().split(',')

        if args[0] == 'scan' and len(args) > 1:
            scanFactories(options, args[1:])
            sys.exit(0)        
        elif args[0] == 'scan':
            scanFactories(options, None)
            sys.exit(0)
 
        if args[0] == 'raw':
            if len(args) != 2:
              print 'raw command requires an argument!'
              sys.exit(1)
            else:
              rawFactory(args[1])
              sys.exit(0)
 
        if args[0] == 'query':
            if len(args) != 2:
              print 'query command requires an argument!'
              sys.exit(1)
            else:
              queryFactory(args[1])
              sys.exit(0)
 
    print 'Must give command argument to vac!'
    sys.exit(1)        
                                                                      